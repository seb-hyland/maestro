# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import os
import pathlib
import typing
from enum import Enum

class Container:
    class Docker(Container):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.str: ...
        def __new__(cls, _0: builtins.str) -> Container.Docker: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key: builtins.int) -> typing.Any: ...

    class Apptainer(Container):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.str: ...
        def __new__(cls, _0: builtins.str) -> Container.Apptainer: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key: builtins.int) -> typing.Any: ...

    ...

class GenericExecutor:
    def exe(self, process: Process) -> builtins.list[pathlib.Path]: ...

class LocalExecutor:
    def __init__(self) -> LocalExecutor: ...
    def with_container(self, container: Container) -> None: ...
    def with_staging_mode(self, mode: StagingMode) -> None: ...
    def exe(self, process: Process) -> builtins.list[pathlib.Path]: ...

class Memory:
    class gb(Memory):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.int: ...
        def __new__(cls, _0: builtins.int) -> Memory.gb: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key: builtins.int) -> typing.Any: ...

    class mb(Memory):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> builtins.int: ...
        def __new__(cls, _0: builtins.int) -> Memory.mb: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key: builtins.int) -> typing.Any: ...

    ...

class MemoryConfig:
    class PerNode(MemoryConfig):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Memory: ...
        def __new__(cls, _0: Memory) -> MemoryConfig.PerNode: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key: builtins.int) -> typing.Any: ...

    class PerCpu(MemoryConfig):
        __match_args__ = ("_0",)
        @property
        def _0(self) -> Memory: ...
        def __new__(cls, _0: Memory) -> MemoryConfig.PerCpu: ...
        def __len__(self) -> builtins.int: ...
        def __getitem__(self, key: builtins.int) -> typing.Any: ...

    ...

class Process:
    def __init__(
        self,
        name: builtins.str,
        script: builtins.str,
        inputs: typing.Mapping[builtins.str, builtins.str | os.PathLike | pathlib.Path],
        outputs: typing.Mapping[
            builtins.str, builtins.str | os.PathLike | pathlib.Path
        ],
        args: typing.Mapping[builtins.str, builtins.str],
    ) -> Process: ...

class SlurmConfig:
    def __init__(self) -> SlurmConfig: ...
    def with_cpus(self, cpus: builtins.int) -> None: ...
    def with_memory(self, memory: MemoryConfig) -> None: ...
    def with_gpus(self, gpus: builtins.int) -> None: ...
    def with_tasks(self, tasks: builtins.int) -> None: ...
    def with_nodes(self, nodes: builtins.int) -> None: ...
    def with_partition(self, partition: builtins.str) -> None: ...
    def with_time(self, time: datetime.timedelta) -> None: ...
    def with_account(self, account: builtins.str) -> None: ...
    def with_mail_user(self, mail_user: builtins.str) -> None: ...
    def with_mail_type(self, mail_type: typing.Sequence[MailType]) -> None: ...
    def with_additional_options(
        self, additional_options: typing.Sequence[tuple[builtins.str, builtins.str]]
    ) -> None: ...

class SlurmExecutor:
    def __init__(self) -> SlurmExecutor: ...
    def with_container(self, container: Container) -> None: ...
    def with_poll_rate(self, rate: datetime.timedelta) -> None: ...
    def with_staging_mode(self, mode: StagingMode) -> None: ...
    def with_module(self, module: builtins.str) -> None: ...
    def with_modules(self, modules: typing.Sequence[builtins.str]) -> None: ...
    def with_config(self, config: SlurmConfig) -> None: ...
    def exe(self, process: Process) -> builtins.list[pathlib.Path]: ...

class MailType(Enum):
    NA = ...
    All = ...
    Begin = ...
    End = ...
    Fail = ...
    Requeue = ...
    InvalidDepend = ...
    StageOut = ...
    TimeLimit50 = ...
    TimeLimit80 = ...
    TimeLimit90 = ...
    TimeLimit = ...
    ArrayTasks = ...

class StagingMode(Enum):
    Copy = ...
    Symlink = ...
    NA = ...

def arg(name: builtins.str) -> builtins.str: ...
def executor(name: builtins.str) -> GenericExecutor: ...
def inputs(name: builtins.str) -> builtins.list[pathlib.Path]: ...
